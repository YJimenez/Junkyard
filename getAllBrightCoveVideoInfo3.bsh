import java.net.*;
import java.io.*;
import java.util.*;
import java.lang.Math;
import java.util.regex.*;
import org.json.simple.*;
import java.text.SimpleDateFormat;
import java.lang.Integer;
addClassPath("/Applications/XAMPP/xamppfiles/htdocs/ooyala/exportarCSV/json-simple-1.1.1.jar");

//function to know if exist an element into an array
isElementExists(String[] data, int index){
    try{
      data[index];
      return true;
    } catch(ArrayIndexOutOfBoundsException e){
      return false;
    }
}

Object jsonBC = new Object();

getJsonString(listURL){

	URL jsonURL = new URL(listURL);

	jsonInputStream = jsonURL.openStream();

	BufferedReader jsonReader = new BufferedReader( new InputStreamReader(jsonInputStream));

	StringBuilder response = new StringBuilder();
	String inputLine;

	while((inputLine = jsonReader.readLine()) != null)
		response.append(inputLine);

	jsonBC = response;
		
	jsonReader.close();
	jsonInputStream.close();

	jsonText = response.toString();
	
	return jsonText;
}

nullWatch(obj,name){
	if(obj==null){
		logEntry("******NullTrigger******");
		allPrint("ERROR: " + name + " is null");
		logEntry("******NullTrigger******");
		logEntry("URL called: \n\n\n\n"+url+"\n");
		logEntry("******NullTrigger******");
		logEntry("Page data: \n\n\n\n"+jsonText+"\n");
		logEntry("******NullTrigger******");
		logEntry("listPage: \n\n\n\n"+listPage+"\n");
		logEntry("******NullTrigger******");
		logEntry("items: \n\n\n\n"+items+"\n");
		logEntry("******NullTrigger******");
		logEntry("item: \n\n\n\n"+item+"\n");
	}
}

noisyPrint(text){
	logEntry(text);
	
	if(noisy){
		System.out.println(text);
	}
}

allPrint(text){
	System.out.println(text);
	logEntry(text);
}

logEntry(text){
	System.err.println(text);
	//logWriter.write(text);
	//logWriter.newLine();
}

pageSize = 20;
totalSize = 0;
totalLength = 0;
count = 0;
errcount = 0;
attempts=0;
noisy = true;
urlOutputFileName = bsh.args[0];
readToken = bsh.args[1];
ArrayList missedIDs = new ArrayList();
missedCount = 0;
Date date = new Date();
File urlOutputFile = new File(urlOutputFileName);
System.out.println("urlOutputFile-- "+urlOutputFile);

if(!urlOutputFile.exists()){
	System.out.println("--URLfiles "+URLfiles);
	System.out.println("--urlOutputFile "+urlOutputFile);
	urlOutputFile.createNewFile();
}

FileWriter urlFileWriter = new FileWriter(urlOutputFile.getAbsoluteFile());
BufferedWriter urlWriter = new BufferedWriter(urlFileWriter);
urlWriter.write("********************************");
urlWriter.newLine();
urlWriter.write(urlOutputFileName);
urlWriter.newLine();
urlWriter.write("Video URLs for Token: " + readToken);
urlWriter.newLine();


	if(noisy){
		System.out.println("Starting...");
	}

	//Row Labels from ooyala
	rowLabels = "video, title, thumbnail, description, hosted_at, flight_start_time, flight_end_time, labels, embed_code, id";	
	
	
		urlbase = "http://api.brightcove.com/services/library?command=find_all_videos&video_fields=id,name,FLVURL,thumbnailURL,shortDescription,startDate,endDate,publishedDate,tags,videoFullLength&media_delivery=http&get_item_count=true&token="+readToken+"&page_size="+pageSize;
	
	
	url = urlbase + "&get_item_count=true";
	
	urlWithComma = url.replaceAll(",",";");
	System.out.println("Initial URL Call");
	//logEntry("URL: "+urlWithComma);
	jsonText = getJsonString(url);
	
	//System.out.println(urlbase);
	
	Object obj = JSONValue.parse(jsonText);
	JSONObject listPage=(JSONObject)obj;
	if(listPage.get("error")!=null){
		allPrint("Error found:\n");
		allPrint(listPage.get("error"));
		return null;
	}
	total_count = listPage.get("total_count");
	//System.out.println("Test: " + listPage.get("error"));
	
	//noisyPrint("Total Count is: " + total_count);
	
	//calculate the total number of pages.
	pages = Math.round(Math.ceil(total_count/pageSize))+1;
	
	//Write rowLabels to the CSV
	logEntry(rowLabels);
	
	//Loop through all of the pages to get the complete set of data
	for(p=0;p<pages;p++){
	
		System.out.println("Starting Page " + p);
		
		url = urlbase + "&page_number="+p;
		System.out.println("URL "+p+": "+url);
		jsonText = getJsonString(url);
		listPage = (JSONObject)JSONValue.parse(jsonText);
		
		items = listPage.get("items");
		if(listPage.get("error")!=null){
			
			if(listPage.get("error").get("code")==103){
				logEntry("********\nConnection Error");
				//retry connection
				logEntry("Retrying Connection");
				attempts=0;
				while((items==null)&&(attempts<4)){
					attempts++;
					logEntry("Attempt: "+attempts);
					jsonText = getJsonString(url);
					listPage = (JSONObject)JSONValue.parse(jsonText);
					items = listPage.get("items");
				}
				if(items==null){
					allPrint("\n***********\nConnection Failed\n***********\n");
				}
			}else{
				allPrint("Error found:\n");
				allPrint("name: "+listPage.get("name").get("name"));
				allPrint("code: "+listPage.get("code").get("code"));
				allPrint("message: "+listPage.get("error").get("message"));
			}
		}
		
		//loop through jsontext
		if (jsonText!=null){
			listPage = (JSONObject)JSONValue.parse(jsonText);
			//logEntry(listPage);
			
			
			for(i=0;i<items.size();i++){
				item = items.get(i);
			}
			
		}
		
		for(i=0;i<items.size();i++){

		}


			for(i=0;i<items.size();i++){
				item = items.get(i);				
				tags = item.get("tags");
				strTags = tags.toString();
				//Metadatas
				metaData0="";
				metaData1="";

				if(tags.size()>0)
					metaData0=tags.get(0);
			  	if(tags.size()>1)
			  		metaData1=tags.get(1);
				/*if(isElementExists(tags, 0)){
   					metaData1=tags.get(0);
				}
				if(isElementExists(tags, 1)){
   					metaData2=tags.get(1);
				}
*/
				//Metadatas
				metaData=strTags;
				strTags = strTags.replaceAll(",",";/");
				strTags = strTags.replaceAll("\\]","");
				strTags = strTags.replaceAll("\\[","/");

				name = item.get("name");
				shortDescription = item.get("shortDescription");
				//replace all carriage returns and commas as it breaks formatting of the csv
				
				if(shortDescription!=null){
					shortDescription = shortDescription.replaceAll(",",".");
					shortDescription = shortDescription.replaceAll("\r","");
					shortDescription = shortDescription.replaceAll("\n","");
				}
				
				if(name!=null){
					name = name.replaceAll(",",".");
					name = name.replaceAll("\r","");
					name = name.replaceAll("\n","");
				}

				//get all the data to be inserted into the csv
				startDate = item.get("startDate");
				endDate = item.get("endDate");
				//playsTotal = item.get("playsTotal");
				FLVURL = item.get("FLVURL");
				nullWatch(item,"item");
				id = item.get("id");
				thumbnailURL = item.get("thumbnailURL");
				publishedDate = item.get("publishedDate");
				//bigRenditionsURL = item.get("url");
				//bigRenditionsEncodingRate = item.get("encodingRate");
				//bigRenditionsHeight = item.get("frameHeight");
				//bigRenditionsWidth = item.get("frameWidth");
				//converts epoch date to UTC  date, declares as startDate2 and endDate2
				long epochDate = Long.parseLong(publishedDate);
				String publishedDate2 = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ssZ").format(new java.util.Date (epochDate));


				if(startDate!=null) {
					long epochDateStart = Long.parseLong(startDate);
					String startDate2 = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ssZ").format(new java.util.Date (epochDateStart));

				}
				else
					startDate2=publishedDate2;

				if(endDate!=null) {
					long epochDateEnd = Long.parseLong(endDate);
					String endDate2 = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ssZ").format(new java.util.Date (epochDateEnd));

				}
				else
					endDate2=endDate;

				if(urlbase.contains("renditions")){
					renditions = item.get("renditions");

					nullWatch(renditions,"renditions");
					if(renditions.size()!=0){
						bigN = 0;
						biggestSize = 0;
						//loop through all the values in the renditions array
						for(j=0;j<renditions.size();j++){
							rendition = renditions.get(j); 
							vidSize = rendition.get("size");
							//record the biggest rendition size as biggestSize
							if(vidSize > biggestSize){
								bigN = j;
								biggestSize = vidSize;
								bigRenditionsURL = rendition.get("url");
								bigRenditionsEncodingRate = rendition.get("encodingRate");
								bigRenditionsHeight = rendition.get("frameHeight");
								bigRenditionsWidth = rendition.get("frameWidth");
							}
							
						}
			
						//bigRendition = renditions.get(bigN);
						//totalSize+= bigRendition.get("size");
						//totalLength+= bigRendition.get("videoDuration");
						urlWriter.write(id+",\t"+bigRendition.get("url"));
						urlWriter.write(id+",\t"+bigRendition.get("FLVURL"));
						urlWriter.newLine();
						count++;
					}
				}
				if(urlbase.contains("videoFullLength")){
					videoFullLength = item.get("videoFullLength");
					if(videoFullLength!=null){
						nullWatch(videoFullLength,"videoFullLength");
						bigRenditionsURL = videoFullLength.get("url");
						bigRenditionsEncodingRate = videoFullLength.get("encodingRate");
						bigRenditionsHeight = videoFullLength.get("frameHeight");
						bigRenditionsWidth = videoFullLength.get("frameWidth");
						totalSize+= videoFullLength.get("size");
						totalLength+= videoFullLength.get("videoDuration");
						
						urlWriter.write(id+",\t"+videoFullLength.get("url"));
						urlWriter.newLine();
					} else{
						//allPrint("******Warning: Video "+id+"is null******");
						errcount++;
					}
					count++;
				}
				//embed_code???
				embed_code="";
				/* 
					WRITE ALL THE VALUES HERE
				*/
				logEntry(FLVURL + "," + name + "," + thumbnailURL + "," + shortDescription + "," + FLVURL + "," + startDate2 + "," + endDate2 + "," + strTags + "," + embed_code + "," + id + "," + metaData1);
				//logEntry("--item "+item);
			}
	}	
	
	//totalSize=(double)totalSize/1048576.0;//MB
	//totalLength= (double)totalLength/60000.0;//minutes
	
	allPrint("");
	allPrint("");
	allPrint("");
	//allPrint("Total Page Count: " + pages);
	allPrint("Number of Videos: "+total_count);
	allPrint("Number of null Videos: "+errcount);
	//allPrint("Total Size: "+totalSize);
	//allPrint("Total Length: "+totalLength);
	//System.out.println("Missed Videos: "+missedCount);
	//System.out.println("Missed Array length: " + missedIDs.size());
	if(count!=total_count){
		allPrint("**************************");
		allPrint("ERROR: The counts are off");
		allPrint("script_count: "+count);
		allPrint("webdata_count: "+ total_count);
	}
	
	urlWriter.close();
	urlFileWriter.close();
	
	//logEntry("Finished: "+ date);
	